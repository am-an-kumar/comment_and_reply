{"version":3,"sources":["hooks/useComponentUpdate.js","utils/lib.js","components/container/App.js","components/container/Comment.js","components/container/Reply.js","components/presentational/styled/Button.js","components/presentational/styled/GlobalStyle.js","components/presentational/styled/Input.js","components/presentational/styled/Legend.js","components/presentational/styled/List.js","components/presentational/styled/Form.js","components/presentational/styled/TextArea.js","components/presentational/styled/StyledInfo.js","components/presentational/styled/Banner.js","components/presentational/unstyled/CommentList.js","components/presentational/unstyled/Info.js","index.js"],"names":["useComponentDidUpdate","effect","dependencies","hasMounted","useRef","useEffect","current","localStorageKey","dummyData","date","id","name","text","replies","getFormattedDate","dateMs","Date","day","getDate","monthIndex","getMonth","year","getFullYear","getMonthName","getParentButton","event","target","tagName","toUpperCase","parentElement","App","useState","comment","disabled","formData","setFormData","commentsJSON","localStorage","getItem","JSON","parse","getCommentsFromLocalStorage","comments","setComments","isAscendingSorted","setIsAscendingSorted","handleToggleSorting","handleChange","value","trimStart","formDataCopy","stringify","setItem","saveCommentsToLocalStorage","commentsToShow","slice","reverse","GlobalStyle","Form","onSubmit","preventDefault","timeStamp","now","Legend","Input","placeholder","onChange","TextArea","Button","type","Banner","onClick","CommentList","handleAddReply","commentId","replierName","replyText","currentTimestamp","map","handleEditReply","replyId","newReply","reply","handleDeleteReply","dataset","Number","filter","handleEditComment","newComment","handleDeleteComment","Comment","showReplyForm","setShowReplyForm","showEditForm","setShowEditForm","setNewComment","repliesToShow","readOnly","StyledInfo","showReplyButton","toggleReply","handleEdit","handleDelete","indented","length","List","Reply","setNewReply","proTypes","PropTypes","number","isRequired","string","func","styled","button","createGlobalStyle","input","legend","ul","form","textarea","props","Info","p","className","data-commentid","data-replyid","onClickCapture","defaultProps","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5eccc1b1.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react'\r\n\r\nfunction useComponentDidUpdate(effect, dependencies = []) {\r\n    const hasMounted = useRef(false)\r\n\r\n    useEffect(() => {\r\n        if (hasMounted.current) {\r\n            effect()\r\n        } else {\r\n            hasMounted.current = true\r\n        }\r\n    }, dependencies)\r\n}\r\n\r\nexport default useComponentDidUpdate\r\n","const localStorageKey = 'comments'\r\n\r\nconst dummyData = [\r\n    {\r\n        date: 1603693344107,\r\n        id: 1603693344107,\r\n        name: 'First dummy user',\r\n        text: 'Dummy comment',\r\n        replies: [\r\n            {\r\n                date: 1603693363681,\r\n                id: 1603693363681,\r\n                name: 'Second dummy user',\r\n                text: 'Dummy reply',\r\n            },\r\n        ],\r\n    },\r\n]\r\n\r\nfunction getCommentsFromLocalStorage() {\r\n    const commentsJSON = localStorage.getItem(localStorageKey)\r\n\r\n    if (commentsJSON) {\r\n        const comments = JSON.parse(commentsJSON)\r\n        return comments\r\n    } else {\r\n        return dummyData\r\n    }\r\n}\r\n\r\nfunction saveCommentsToLocalStorage(comments) {\r\n    const commentsJSON = JSON.stringify(comments)\r\n    localStorage.setItem(localStorageKey, commentsJSON)\r\n}\r\n\r\nfunction getMonthName(monthIndex) {\r\n    switch (monthIndex) {\r\n        case 0:\r\n            return 'Jan'\r\n        case 1:\r\n            return 'Feb'\r\n        case 2:\r\n            return 'Mar'\r\n        case 3:\r\n            return 'Apr'\r\n        case 4:\r\n            return 'May'\r\n        case 5:\r\n            return 'Jun'\r\n        case 6:\r\n            return 'Jul'\r\n        case 7:\r\n            return 'Aug'\r\n        case 8:\r\n            return 'Sep'\r\n        case 9:\r\n            return 'Oct'\r\n        case 10:\r\n            return 'Nov'\r\n        case 11:\r\n            return 'Dec'\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nfunction getFormattedDate(dateMs) {\r\n    const date = new Date(dateMs)\r\n\r\n    const day = date.getDate()\r\n    const monthIndex = date.getMonth()\r\n    const year = date.getFullYear()\r\n\r\n    return `${day} ${getMonthName(monthIndex)} ${year}`\r\n}\r\n\r\nfunction getParentButton(event) {\r\n    switch (event.target.tagName.toUpperCase()) {\r\n        case 'PATH':\r\n            return event.target.parentElement.parentElement\r\n        case 'SVG':\r\n            return event.target.parentElement\r\n        case 'BUTTON':\r\n        default:\r\n            return event.target\r\n    }\r\n}\r\n\r\nexport {\r\n    getCommentsFromLocalStorage,\r\n    saveCommentsToLocalStorage,\r\n    getFormattedDate,\r\n    getParentButton,\r\n}\r\n","import React, { useState } from 'react'\r\nimport {\r\n    GlobalStyle,\r\n    Form,\r\n    Input,\r\n    TextArea,\r\n    Button,\r\n    Legend,\r\n    Banner,\r\n    CommentList,\r\n} from 'components'\r\nimport useComponentDidUpdate from 'hooks/useComponentUpdate'\r\nimport { BsArrowUp, BsArrowDown } from 'react-icons/bs'\r\nimport {\r\n    getCommentsFromLocalStorage,\r\n    saveCommentsToLocalStorage,\r\n    getParentButton,\r\n} from 'utils/lib'\r\n\r\nfunction App() {\r\n    const [formData, setFormData] = useState({\r\n        name: '',\r\n        comment: '',\r\n        disabled: true,\r\n    })\r\n\r\n    const [comments, setComments] = useState(getCommentsFromLocalStorage())\r\n\r\n    const [isAscendingSorted, setIsAscendingSorted] = useState(true)\r\n\r\n    useComponentDidUpdate(() => {\r\n        saveCommentsToLocalStorage(comments)\r\n    }, [comments])\r\n\r\n    function handleToggleSorting() {\r\n        setIsAscendingSorted(!isAscendingSorted)\r\n    }\r\n\r\n    function handleSubmit(event) {\r\n        event.preventDefault()\r\n\r\n        const { name, comment } = formData\r\n        const timeStamp = Date.now()\r\n\r\n        setComments([\r\n            ...comments,\r\n            {\r\n                name,\r\n                text: comment,\r\n                id: timeStamp,\r\n                date: timeStamp,\r\n                replies: [],\r\n            },\r\n        ])\r\n\r\n        setFormData({\r\n            name: '',\r\n            comment: '',\r\n            disabled: true,\r\n        })\r\n    }\r\n\r\n    function handleChange(event) {\r\n        let { name, value } = event.target\r\n        value = value.trimStart()\r\n\r\n        // this is a deep copy as formData has primitive properties only\r\n        const formDataCopy = { ...formData }\r\n        formDataCopy[name] = value\r\n\r\n        setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n            disabled: !(formDataCopy.name && formDataCopy.comment),\r\n        })\r\n    }\r\n\r\n    // edit/delete comments handlers\r\n    function handleEditComment(commentId, newComment) {\r\n        setComments(\r\n            comments.map(function mapComment(comment) {\r\n                return comment.id === commentId\r\n                    ? { ...comment, text: newComment }\r\n                    : comment\r\n            }),\r\n        )\r\n    }\r\n\r\n    function handleDeleteComment(event) {\r\n        let target = getParentButton(event)\r\n\r\n        // DOM attributes are strings\r\n        const commentId = Number(target.dataset['commentid'])\r\n\r\n        setComments(\r\n            comments.filter(function filterComment(comment) {\r\n                return comment.id !== commentId\r\n            }),\r\n        )\r\n    }\r\n\r\n    // add/edit/delete replies handlers\r\n    function handleAddReply(commentId, replierName, replyText) {\r\n        const currentTimestamp = Date.now()\r\n\r\n        setComments(\r\n            comments.map(function mapComments(comment) {\r\n                return comment.id === commentId\r\n                    ? {\r\n                          ...comment,\r\n                          replies: [\r\n                              ...comment.replies,\r\n                              {\r\n                                  name: replierName,\r\n                                  text: replyText,\r\n                                  id: currentTimestamp,\r\n                                  date: currentTimestamp,\r\n                              },\r\n                          ],\r\n                      }\r\n                    : comment\r\n            }),\r\n        )\r\n    }\r\n\r\n    function handleEditReply(commentId, replyId, newReply) {\r\n        setComments(\r\n            comments.map(function mapComment(comment) {\r\n                return comment.id === commentId\r\n                    ? {\r\n                          ...comment,\r\n                          replies: comment.replies.map(function mapReply(\r\n                              reply,\r\n                          ) {\r\n                              return reply.id === replyId\r\n                                  ? { ...reply, text: newReply }\r\n                                  : reply\r\n                          }),\r\n                      }\r\n                    : comment\r\n            }),\r\n        )\r\n    }\r\n\r\n    function handleDeleteReply(event) {\r\n        let target = getParentButton(event)\r\n\r\n        const dataset = target.dataset\r\n        const commentId = Number(dataset['commentid'])\r\n        const replyId = Number(dataset['replyid'])\r\n\r\n        setComments(\r\n            comments.map(function mapComment(comment) {\r\n                return comment.id === commentId\r\n                    ? {\r\n                          ...comment,\r\n                          replies: comment.replies.filter(function filterReply(\r\n                              reply,\r\n                          ) {\r\n                              return reply.id !== replyId\r\n                          }),\r\n                      }\r\n                    : comment\r\n            }),\r\n        )\r\n    }\r\n\r\n    const commentsToShow = isAscendingSorted\r\n        ? comments\r\n        : comments.slice().reverse()\r\n\r\n    return (\r\n        <>\r\n            <GlobalStyle />\r\n\r\n            <Form onSubmit={handleSubmit}>\r\n                <Legend>Comment</Legend>\r\n                <Input\r\n                    name=\"name\"\r\n                    placeholder=\"Name\"\r\n                    value={formData.name}\r\n                    onChange={handleChange}\r\n                />\r\n                <TextArea\r\n                    name=\"comment\"\r\n                    placeholder=\"Comment\"\r\n                    value={formData.comment}\r\n                    onChange={handleChange}\r\n                />\r\n                <Button type=\"submit\" disabled={formData.disabled}>\r\n                    Post\r\n                </Button>\r\n            </Form>\r\n\r\n            <Banner>\r\n                <span>Sort By: Date and Time</span>\r\n                {isAscendingSorted ? (\r\n                    <BsArrowDown onClick={handleToggleSorting} />\r\n                ) : (\r\n                    <BsArrowUp onClick={handleToggleSorting} />\r\n                )}\r\n            </Banner>\r\n\r\n            <CommentList\r\n                comments={commentsToShow}\r\n                handleAddReply={handleAddReply}\r\n                handleEditReply={handleEditReply}\r\n                handleDeleteReply={handleDeleteReply}\r\n                handleEditComment={handleEditComment}\r\n                handleDeleteComment={handleDeleteComment}\r\n                isAscendingSorted={isAscendingSorted}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport { App }\r\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {\r\n    Form,\r\n    Input,\r\n    TextArea,\r\n    Button,\r\n    Legend,\r\n    List,\r\n    StyledInfo,\r\n    Reply,\r\n} from 'components'\r\n\r\nfunction Comment({\r\n    name,\r\n    text,\r\n    id,\r\n    date,\r\n    replies,\r\n    handleAddReply,\r\n    handleEditReply,\r\n    handleDeleteReply,\r\n    handleEditComment,\r\n    handleDeleteComment,\r\n    isAscendingSorted,\r\n}) {\r\n    const [showReplyForm, setShowReplyForm] = useState(false)\r\n    const [showEditForm, setShowEditForm] = useState(false)\r\n    const [newComment, setNewComment] = useState(text)\r\n\r\n    const [formData, setFormData] = useState({\r\n        name: '',\r\n        reply: '',\r\n        disabled: true,\r\n    })\r\n\r\n    function handleAddReplySubmit(event) {\r\n        event.preventDefault()\r\n        const { name, reply } = formData\r\n\r\n        handleAddReply(id, name, reply)\r\n        setFormData({\r\n            name: '',\r\n            reply: '',\r\n            disabled: true,\r\n        })\r\n        setShowReplyForm(false)\r\n    }\r\n\r\n    function handleEditFormSubmit(event) {\r\n        event.preventDefault()\r\n        handleEditComment(id, newComment)\r\n        setShowEditForm(false)\r\n    }\r\n\r\n    function handleChange(event) {\r\n        let { name, value } = event.target\r\n        value = value.trimStart()\r\n\r\n        // this is a deep copy as formData has primitive properties only\r\n        const formDataCopy = { ...formData }\r\n        formDataCopy[name] = value\r\n\r\n        setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n            disabled: !(formDataCopy.name && formDataCopy.reply),\r\n        })\r\n    }\r\n\r\n    function toggleReply() {\r\n        setShowReplyForm(!showReplyForm)\r\n    }\r\n\r\n    const repliesToShow = isAscendingSorted\r\n        ? replies\r\n        : replies.slice().reverse()\r\n\r\n    return (\r\n        <li>\r\n            {showEditForm ? (\r\n                <Form onSubmit={handleEditFormSubmit}>\r\n                    <Legend>Comment</Legend>\r\n                    <Input\r\n                        name=\"name\"\r\n                        placeholder=\"Name\"\r\n                        value={name}\r\n                        readOnly={true}\r\n                    />\r\n                    <TextArea\r\n                        name=\"comment\"\r\n                        placeholder=\"Comment\"\r\n                        value={newComment}\r\n                        onChange={(event) => setNewComment(event.target.value)}\r\n                    />\r\n                    <Button type=\"submit\" disabled={!newComment}>\r\n                        Post\r\n                    </Button>\r\n                </Form>\r\n            ) : (\r\n                <StyledInfo\r\n                    name={name}\r\n                    text={text}\r\n                    commentId={id}\r\n                    date={date}\r\n                    showReplyButton={true}\r\n                    toggleReply={toggleReply}\r\n                    handleEdit={() => setShowEditForm(true)}\r\n                    handleDelete={handleDeleteComment}\r\n                />\r\n            )}\r\n\r\n            {showReplyForm && (\r\n                <Form onSubmit={handleAddReplySubmit} indented={true}>\r\n                    <Legend>Reply</Legend>\r\n                    <Input\r\n                        name=\"name\"\r\n                        placeholder=\"Name\"\r\n                        value={formData.name}\r\n                        onChange={handleChange}\r\n                    />\r\n                    <TextArea\r\n                        name=\"reply\"\r\n                        placeholder=\"Reply\"\r\n                        value={formData.reply}\r\n                        onChange={handleChange}\r\n                    />\r\n                    <Button type=\"submit\" disabled={formData.disabled}>\r\n                        Post\r\n                    </Button>\r\n                </Form>\r\n            )}\r\n\r\n            {replies.length !== 0 && (\r\n                <List indented={true}>\r\n                    {repliesToShow.map(function mapReply(reply) {\r\n                        return (\r\n                            <Reply\r\n                                key={reply.id}\r\n                                commentId={id}\r\n                                replyId={reply.id}\r\n                                {...reply}\r\n                                handleDeleteReply={handleDeleteReply}\r\n                                handleEditReply={handleEditReply}\r\n                            />\r\n                        )\r\n                    })}\r\n                </List>\r\n            )}\r\n        </li>\r\n    )\r\n}\r\n\r\nComment.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    text: PropTypes.string.isRequired,\r\n    id: PropTypes.number.isRequired,\r\n    date: PropTypes.number.isRequired,\r\n    replies: PropTypes.array.isRequired,\r\n    handleAddReply: PropTypes.func.isRequired,\r\n    handleEditReply: PropTypes.func.isRequired,\r\n    handleDeleteReply: PropTypes.func.isRequired,\r\n    handleEditComment: PropTypes.func.isRequired,\r\n    handleDeleteComment: PropTypes.func.isRequired,\r\n}\r\n\r\nexport { Comment }\r\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Form, Legend, Input, TextArea, Button, StyledInfo } from 'components'\r\n\r\nfunction Reply({\r\n    commentId,\r\n    replyId,\r\n    name,\r\n    text,\r\n    date,\r\n    handleDeleteReply,\r\n    handleEditReply,\r\n}) {\r\n    const [newReply, setNewReply] = useState(text)\r\n    const [showEditForm, setShowEditForm] = useState(false)\r\n\r\n    function handleSubmit(event) {\r\n        event.preventDefault()\r\n        handleEditReply(commentId, replyId, newReply)\r\n        setShowEditForm(false)\r\n    }\r\n\r\n    return showEditForm ? (\r\n        <Form onSubmit={handleSubmit}>\r\n            <Legend>Reply</Legend>\r\n            <Input\r\n                name=\"name\"\r\n                placeholder=\"Name\"\r\n                value={name}\r\n                readOnly={true}\r\n            />\r\n            <TextArea\r\n                name=\"reply\"\r\n                placeholder=\"Reply\"\r\n                value={newReply}\r\n                onChange={(event) => setNewReply(event.target.value)}\r\n            />\r\n            <Button type=\"submit\" disabled={!newReply}>\r\n                Post\r\n            </Button>\r\n        </Form>\r\n    ) : (\r\n        <StyledInfo\r\n            commentId={commentId}\r\n            replyId={replyId}\r\n            name={name}\r\n            text={text}\r\n            date={date}\r\n            handleDelete={handleDeleteReply}\r\n            handleEdit={() => setShowEditForm(true)}\r\n        />\r\n    )\r\n}\r\n\r\nReply.proTypes = {\r\n    commentId: PropTypes.number.isRequired,\r\n    replyId: PropTypes.number.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    text: PropTypes.string.isRequired,\r\n    date: PropTypes.number.isRequired,\r\n    handleDeleteReply: PropTypes.func.isRequired,\r\n}\r\n\r\nexport { Reply }\r\n","import styled from 'styled-components'\r\n\r\nconst Button = styled.button`\r\n    border: none;\r\n    outline: none;\r\n    border-radius: 5px;\r\n    font-family: Rubik, sans-serif;\r\n    padding: 0.6rem 1rem;\r\n    background-color: dodgerblue;\r\n    color: white;\r\n    text-transform: uppercase;\r\n\r\n    &:disabled {\r\n        background-color: #999;\r\n        color: black;\r\n        cursor: none;\r\n    }\r\n`\r\n\r\nexport { Button }\r\n","import { createGlobalStyle } from 'styled-components'\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n    *, *::before,*::after {\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    html, body, #root {\r\n        padding: 0;\r\n        margin: 0;\r\n        width: 100%;\r\n        height: 100%;\r\n    }\r\n\r\n    html {\r\n        font-family: Karla, sans-serif;\r\n    }\r\n\r\n    h1,h2,h3,h4,h5,h6 {\r\n        font-family: Rubik, sans-serif;\r\n    }\r\n\r\n    #root {\r\n        padding: 1rem;\r\n        display: flex;\r\n        flex-flow: column nowrap;\r\n\r\n        max-width: 600px;\r\n        width: 100%;\r\n        margin: 0 auto;\r\n    }\r\n\r\n    @keyframes expand {\r\n        from {\r\n            opacity: 0;\r\n        }\r\n        to {\r\n            opacity: 1;\r\n        }\r\n    }\r\n`\r\n\r\nexport { GlobalStyle }\r\n","import styled from 'styled-components'\r\n\r\nconst Input = styled.input`\r\n    padding: 0.4rem 1rem;\r\n    border-radius: 2px;\r\n    border: none;\r\n    outline: none;\r\n\r\n    &:read-only {\r\n        background-color: #dedede;\r\n    }\r\n`\r\n\r\nexport { Input }\r\n","import styled from 'styled-components'\r\n\r\nconst Legend = styled.legend`\r\n    margin-bottom: 1rem;\r\n    font-family: Rubik, sans-serif;\r\n`\r\n\r\nexport { Legend }\r\n","import styled from 'styled-components'\r\n\r\nconst List = styled.ul`\r\n    list-style-type: none;\r\n    padding-left: ${({ indented }) => (indented ? '3rem' : '0')};\r\n`\r\n\r\nexport { List }\r\n","import styled from 'styled-components'\r\n\r\nconst Form = styled.form`\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n    animation: expand 0.5s ease-in-out;\r\n\r\n    padding: 1rem;\r\n    margin: 1rem 0;\r\n    margin-left: ${({ indented }) => (indented ? '3rem' : '0')};\r\n    background-color: #dedede;\r\n    border-radius: 5px;\r\n\r\n    & p {\r\n        margin: 0 0 1rem 0;\r\n    }\r\n\r\n    & input {\r\n        margin-bottom: 1rem;\r\n    }\r\n\r\n    & textarea {\r\n        margin-bottom: 1rem;\r\n    }\r\n\r\n    & button {\r\n        align-self: flex-end;\r\n    }\r\n`\r\n\r\nexport { Form }\r\n","import styled from 'styled-components'\r\n\r\nconst TextArea = styled.textarea`\r\n    padding: 0.4rem 1rem;\r\n    border-radius: 2px;\r\n    border: none;\r\n    outline: none;\r\n    resize: vertical;\r\n`\r\n\r\nexport { TextArea }\r\n","import styled from 'styled-components'\r\nimport { Info } from 'components'\r\n\r\nconst StyledInfo = styled((props) => <Info {...props} />)`\r\n    margin-bottom: 1rem;\r\n    padding: 1rem;\r\n    background-color: #dedede;\r\n    border-radius: 5px;\r\n    position: relative;\r\n    animation: expand 0.5s ease-in-out;\r\n\r\n    & > .meta {\r\n        display: flex;\r\n        flex-flow: row nowrap;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n\r\n        & > .name {\r\n            font-weight: bold;\r\n            text-transform: capitalize;\r\n        }\r\n    }\r\n\r\n    & > .buttons {\r\n        button {\r\n            background-color: transparent;\r\n            color: #0471dc;\r\n            font-weight: bold;\r\n            padding: 0;\r\n            margin-right: 1rem;\r\n        }\r\n    }\r\n\r\n    .delete-btn {\r\n        margin: 0;\r\n        padding: 0;\r\n        position: absolute;\r\n        top: 50%;\r\n        right: 0;\r\n        transform: translate(50%, -50%);\r\n        width: 24px;\r\n        height: 24px;\r\n        border-radius: 50%;\r\n        background-color: #333;\r\n        color: 'white';\r\n    }\r\n`\r\n\r\nexport { StyledInfo }\r\n","import styled from 'styled-components'\r\n\r\nconst Banner = styled.p`\r\n    display: flex;\r\n    flex-flow: row nowrap;\r\n    justify-content: flex-end;\r\n    align-items: center;\r\n    margin: 0;\r\n\r\n    & > svg {\r\n        margin-left: 0.5rem;\r\n    }\r\n`\r\n\r\nexport { Banner }\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Comment, List } from 'components'\r\n\r\nfunction CommentList({\r\n    comments,\r\n    handleAddReply,\r\n    handleEditReply,\r\n    handleDeleteReply,\r\n    handleEditComment,\r\n    handleDeleteComment,\r\n    isAscendingSorted,\r\n}) {\r\n    return (\r\n        comments.length !== 0 && (\r\n            <List>\r\n                {comments.map(function mapComments(comment) {\r\n                    return (\r\n                        <Comment\r\n                            key={comment.id}\r\n                            {...comment}\r\n                            handleAddReply={handleAddReply}\r\n                            handleEditReply={handleEditReply}\r\n                            handleDeleteReply={handleDeleteReply}\r\n                            handleEditComment={handleEditComment}\r\n                            handleDeleteComment={handleDeleteComment}\r\n                            isAscendingSorted={isAscendingSorted}\r\n                        />\r\n                    )\r\n                })}\r\n            </List>\r\n        )\r\n    )\r\n}\r\n\r\nCommentList.propTypes = {\r\n    comments: PropTypes.array.isRequired,\r\n    handleAddReply: PropTypes.func.isRequired,\r\n    handleEditReply: PropTypes.func.isRequired,\r\n    handleDeleteReply: PropTypes.func.isRequired,\r\n    handleEditComment: PropTypes.func.isRequired,\r\n    handleDeleteComment: PropTypes.func.isRequired,\r\n    isAscendingSorted: PropTypes.bool.isRequired,\r\n}\r\n\r\nexport { CommentList }\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { MdDelete } from 'react-icons/md'\r\nimport { Button } from 'components/presentational/styled'\r\nimport { getFormattedDate } from 'utils/lib'\r\n\r\n// comments will just have the commentId while replies will have both commentId and replyId\r\nfunction Info({\r\n    showReplyButton,\r\n    toggleReply,\r\n    handleDelete,\r\n    handleEdit,\r\n    name,\r\n    text,\r\n    date,\r\n    commentId,\r\n    replyId,\r\n    className,\r\n}) {\r\n    return (\r\n        <div className={className}>\r\n            <div className=\"meta\">\r\n                <span className=\"name\">{name}</span>\r\n                <span className=\"date\">{getFormattedDate(date)}</span>\r\n                {}\r\n            </div>\r\n            <p className=\"text\">{text}</p>\r\n            <div className=\"buttons\">\r\n                {showReplyButton && (\r\n                    <Button\r\n                        data-commentid={commentId}\r\n                        data-replyid={replyId}\r\n                        onClick={toggleReply}\r\n                    >\r\n                        Reply\r\n                    </Button>\r\n                )}\r\n                <Button\r\n                    data-commentid={commentId}\r\n                    data-replyid={replyId}\r\n                    onClick={handleEdit}\r\n                >\r\n                    Edit\r\n                </Button>\r\n            </div>\r\n            <Button\r\n                className=\"delete-btn\"\r\n                data-commentid={commentId}\r\n                data-replyid={replyId}\r\n                onClickCapture={handleDelete}\r\n            >\r\n                <MdDelete />\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nInfo.defaultProps = {\r\n    commentId: -1,\r\n    replyId: -1,\r\n}\r\n\r\nInfo.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    text: PropTypes.string.isRequired,\r\n    commentId: PropTypes.number.isRequired,\r\n    replyId: PropTypes.number,\r\n    date: PropTypes.number.isRequired,\r\n    showReplyButton: PropTypes.bool,\r\n    toggleReply: PropTypes.func,\r\n    handleDelete: PropTypes.func.isRequired,\r\n    handleEdit: PropTypes.func.isRequired,\r\n    className: PropTypes.string,\r\n}\r\n\r\nexport { Info }\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { App } from 'components'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}